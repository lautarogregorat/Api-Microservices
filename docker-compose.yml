services:
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8
    volumes:
      - ./docker/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: ${DB_VENDOR}
      DB_ADDR: ${DB_ADDR}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  loki:
    image: grafana/loki:main
    command: ['-config.file=/etc/loki/local-config.yaml']
    ports:
      - '3100:3100'

  prometheus:
    image: prom/prometheus:v2.46.0
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - '9090:9090'

  tempo:
    image: grafana/tempo:2.2.2
    command: [ '-config.file=/etc/tempo.yaml' ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    ports:
      - '3110:3100' # Tempo
      - '9411:9411' # zipkin

  grafana:
    image: grafana/grafana:10.1.0
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - '3000:3000'

  mysqlOrder:
    image: mysql:8.4
    container_name: orderService
    ports:
      - "3306:3306"
    environment:
      # Cargar variables de entorno desde el archivo .env
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_ORDER}
      MYSQL_DATABASE: ${MYSQL_DATABASE_ORDER}
      MYSQL_USER: ${MYSQL_USER_ORDER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD_ORDER}
    volumes:
      - ./docker/mysqlOrder/mysql_data:/var/lib/mysql
      - ./docker/mysqlOrder/init.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
      # - schema-registry
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      #  KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'

  mongodb:
    image: mongo:7.0.5
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: product-service
    volumes:
      - ./docker/data/mongodb:/data/db

  mysqlInventory:
    image: mysql:8.4
    container_name: inventoryService
    ports:
      - "3307:3306"
    environment:
      # Cargar variables de entorno desde el archivo .env
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_INV}
      MYSQL_DATABASE: ${MYSQL_DATABASE_INV}
      MYSQL_USER: ${MYSQL_USER_INV}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD_INV}
    volumes:
      - ./docker/mysqlInventory/mysql_data:/var/lib/mysql
      - ./docker/mysqlInventory/init.sql:/docker-entrypoint-initdb.d/init.sql
